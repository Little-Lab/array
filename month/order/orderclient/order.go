// Code generated by goctl. DO NOT EDIT.
// Source: order.proto

package orderclient

import (
	"context"

	"order/order"

	"github.com/zeromicro/go-zero/zrpc"
	"google.golang.org/grpc"
)

type (
	Response               = order.Response
	TranCreateOrderRequest = order.TranCreateOrderRequest
	TranDelOrderRequest    = order.TranDelOrderRequest

	Order interface {
		TranCreateOrder(ctx context.Context, in *TranCreateOrderRequest, opts ...grpc.CallOption) (*Response, error)
		TranRollback(ctx context.Context, in *TranDelOrderRequest, opts ...grpc.CallOption) (*Response, error)
		CreateOrder(ctx context.Context, in *TranCreateOrderRequest, opts ...grpc.CallOption) (*Response, error)
	}

	defaultOrder struct {
		cli zrpc.Client
	}
)

func NewOrder(cli zrpc.Client) Order {
	return &defaultOrder{
		cli: cli,
	}
}

func (m *defaultOrder) TranCreateOrder(ctx context.Context, in *TranCreateOrderRequest, opts ...grpc.CallOption) (*Response, error) {
	client := order.NewOrderClient(m.cli.Conn())
	return client.TranCreateOrder(ctx, in, opts...)
}

func (m *defaultOrder) TranRollback(ctx context.Context, in *TranDelOrderRequest, opts ...grpc.CallOption) (*Response, error) {
	client := order.NewOrderClient(m.cli.Conn())
	return client.TranRollback(ctx, in, opts...)
}

func (m *defaultOrder) CreateOrder(ctx context.Context, in *TranCreateOrderRequest, opts ...grpc.CallOption) (*Response, error) {
	client := order.NewOrderClient(m.cli.Conn())
	return client.CreateOrder(ctx, in, opts...)
}
