// Code generated by goctl. DO NOT EDIT.

package inventorymodel

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
)

var (
	goodsFieldNames          = builder.RawFieldNames(&Goods{})
	goodsRows                = strings.Join(goodsFieldNames, ",")
)

type (
	goodsModel interface {
		FindOneByGoodsId(goodsId int64) (*Goods, error)
		DecuctStock(tx *sql.Tx, goodsId, stock int64) (sql.Result, error)
		DecuctStocks(ctx context.Context, goodsId, stock int64) (sql.Result, error)
		AddStock(tx *sql.Tx, goodsId, stock int64) error
		AddStocks(ctx context.Context, goodsId, stock int64) error
	}

	defaultGoodsModel struct {
		conn  sqlx.SqlConn
		table string
	}

	Goods struct {
		Id         int64           `db:"id"`          // 商品ID
		Name       string  `db:"name"`        // 商品名称
		OnSale     int64           `db:"on_sale"`     // 是否在卖
		GoodsSn    string  `db:"goods_sn"`    // 商品编号
		GoodsBrief string  `db:"goods_brief"` // 商品描述
		Images     string  `db:"images"`      // 商品图片
		Price      float64 `db:"price"`       // 商品价格
		IsHot      int64           `db:"is_hot"`      // 是否热卖
		CreatedAt  time.Time    `db:"created_at"`  // 创建时间
		UpdatedAt  time.Time    `db:"updated_at"`  // 修改时间
		IsDeleted  int64           `db:"is_deleted"`  // 是否删除
		Types      string  `db:"types"`       // 商品类型
		Stock      int64   `db:"stock"`       // 商品库存
		UserId     int64   `db:"user_id"`     // 用户ID
	}
)

func newGoodsModel(conn sqlx.SqlConn) *defaultGoodsModel {
	return &defaultGoodsModel{
		conn:  conn,
		table: "`goods`",
	}
}

func (m *defaultGoodsModel) withSession(session sqlx.Session) *defaultGoodsModel {
	return &defaultGoodsModel{
		conn:  sqlx.NewSqlConnFromSession(session),
		table: "`goods`",
	}
}

func (m *defaultGoodsModel) FindOneByGoodsId(goodsId int64) (*Goods, error) {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", goodsRows, m.table)
	var resp Goods
	err := m.conn.QueryRow(&resp, query, goodsId)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, err
	default:
		return nil, err
	}
}

func (m *defaultGoodsModel) DecuctStock(tx *sql.Tx, goodsId, stock int64) (sql.Result, error) {
	query := fmt.Sprintf("update %s set `stock` = `stock` - ? where `id` = ?", m.table)
	return tx.Exec(query, stock, goodsId)
}

func (m *defaultGoodsModel) DecuctStocks(ctx context.Context, goodsId, stock int64) (sql.Result, error) {
	query := fmt.Sprintf("update %s set `stock` = `stock` - ? where `id` = ?", m.table)
	return m.conn.ExecCtx(ctx,query, stock, goodsId)
}

func (m *defaultGoodsModel) AddStocks(ctx context.Context, goodsId, stock int64) error {
	query := fmt.Sprintf("update %s set `stock` = `stock` + ? where `id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx,query, stock, goodsId)
	return err
}

func (m *defaultGoodsModel) AddStock(tx *sql.Tx, goodsId, stock int64) error {
	query := fmt.Sprintf("update %s set `stock` = `stock` + ? where `id` = ?", m.table)
	_, err := tx.Exec(query, stock, goodsId)
	return err
}