// Code generated by goctl. DO NOT EDIT.

package ordermodel

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	orderinfoFieldNames          = builder.RawFieldNames(&Orderinfo{})
	orderinfoRows                = strings.Join(orderinfoFieldNames, ",")
	orderRowsExpectAutoSet   = strings.Join(stringx.Remove(orderinfoFieldNames, "`id`","deleted_at"), ",")
	orderRowsWithPlaceHolder = strings.Join(stringx.Remove(orderinfoFieldNames, "`id`", "`create_time`", "`update_time`"), "=?,") + "=?"
)

type (
	orderinfoModel interface {
		FindLastOneByUserIdGoodsId(id int64) (*Orderinfo, error)
		Insert(tx *sql.Tx, data *Orderinfo) (sql.Result, error)
		Inserts(ctx context.Context, data *Orderinfo) (sql.Result, error)
		Update(tx *sql.Tx, id int64) error
		Updates(ctx context.Context, id int64) error
	}

	defaultOrderinfoModel struct {
		conn  sqlx.SqlConn
		table string
	}

	Orderinfo struct {
		Id         int64           `db:"id"`          // 订单id
		GoodsId    int64           `db:"goods_id"`    // 商品id
		CreatedAt  time.Time   `db:"created_at"`  // 创建时间
		UpdatedAt  time.Time    `db:"updated_at"`  // 修改时间
		DeletedAt  *time.Time    `db:"deleted_at"`  // 删除时间
		IsDeleted  int64           `db:"is_deleted"`  // 是否删除
		UserId     int64   `db:"user_id"`     // 用户id
		OrderSn    string  `db:"order_sn"`    // 订单编号
		PayType    int64   `db:"pay_type"`    // 支付方式
		Status     int64           `db:"status"`      // 订单状态
		OrderMount float64 `db:"order_mount"` // 订单金额
		Count      int64   `db:"count"`       // 购买数量
	}
)

func newOrderinfoModel(conn sqlx.SqlConn) *defaultOrderinfoModel {
	return &defaultOrderinfoModel{
		conn:  conn,
		table: "`orderinfo`",
	}
}

func (m *defaultOrderinfoModel) withSession(session sqlx.Session) *defaultOrderinfoModel {
	return &defaultOrderinfoModel{
		conn:  sqlx.NewSqlConnFromSession(session),
		table: "`orderinfo`",
	}
}

func (m *defaultOrderinfoModel) FindLastOneByUserIdGoodsId(id int64) (*Orderinfo, error) {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", orderinfoRows, m.table)
	var resp Orderinfo
	err := m.conn.QueryRow(&resp, query,id)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultOrderinfoModel) Insert(tx *sql.Tx, data *Orderinfo) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (`goods_id`,`created_at`,`updated_at`,`is_deleted`,`user_id`,`order_sn`,`pay_type`,`status`,`order_mount`,`count`) values (?, ?, ? ,?,?,?,?,?,?,?)", m.table)
	return tx.Exec(query, data.GoodsId, data.CreatedAt, data.UpdatedAt, data.IsDeleted,data.UserId,data.OrderSn,data.PayType,data.Status,data.OrderMount,
		data.Count)
}

func (m *defaultOrderinfoModel) Inserts(ctx context.Context, data *Orderinfo) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (`goods_id`,`created_at`,`updated_at`,`is_deleted`,`user_id`,`order_sn`,`pay_type`,`status`,`order_mount`,`count`) values (?, ?, ? ,?,?,?,?,?,?,?)", m.table)
	return m.conn.ExecCtx(ctx,query, data.GoodsId, data.CreatedAt, data.UpdatedAt, data.IsDeleted,data.UserId,data.OrderSn,data.PayType,data.Status,data.OrderMount,
		data.Count)
}

func (m *defaultOrderinfoModel) Update(tx *sql.Tx, id int64) error {
	query := fmt.Sprintf("update %s set deleted_at = NOW() where `id` = ? and", m.table)
	_, err := tx.Exec(query, id)
	return err
}
func (m *defaultOrderinfoModel) Updates(ctx context.Context, id int64) error {
	query := fmt.Sprintf("update %s set deleted_at = NOW() where `id` = ? and", m.table)
	_, err := m.conn.ExecCtx(ctx,query, id)
	return err
}